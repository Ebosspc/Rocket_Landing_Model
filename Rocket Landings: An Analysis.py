"""
Rocket Landings: An Analysis
@authors: Ethan Francolla, Dr. Matthew Sartucci
Created in Anaconda Sypder and VS Code
6/1/2021-present
"""


'''
SECTION 1-Vertical Takeoff-
    
Introducary Remarks:
This model is designed to show a rocket's trajectory, from takeoff to landing.
It describes the trajectory as vertical position with repect to time.
This model is only tracking vertical position in time because the other
assuptions made make it easier to assume a 2d plane for modeling and
a seperate set of equations to model drag, and jsut output
it into the 2d plane. Even if it were trackign in a 3d plane, those beneifts
would not matter due to the other assumptions and sources of error contained
within the model

Important Notes:
The y-axis can be seen as the altitude, or distance above ground (in meters)
The x-axis can be seen as the time passed(in seconds)
The sequence of events necessary to land the rocket will start the
second that the rocket is at its apex, and has 0 upwards velocity
At that point systems will  orient the rocket properly as it descends,
freefalling for a while beforedoing a rentry burn. 
Then, right before it hits the ground, the rocket will do a landing burn
to bring its velocity from the terminal velocity it was falling with to a 
stop, rigt as it touches the ground, landing verically.

Assumptions: 
The rocket launches from the ground starting at a velocity of zero
The postiiton of the rocket accross the bounds of the model is one-dimentional
Therefore, it goes straight up and then straight down
As the engine is burning it pushes the rocket with constant acceleration
Engine cutoff is instantaneous and immidiately sets the acceleration to 0
Obviously, gravity will still be acting on the rocket, during engine cutoff.
The rocket launches from the ground starting at a velocity of zero
The postiiton of the rocket accross the bounds of the model is one-dimentional
Therefore, it goes straight up and then straight down
As the engine is burning it pushes the rocket with constant acceleration
Engine cutoff is instantaneous and immidiately sets the acceleration to 0
Gravity remains constant thoughout the model
Air resistance is negligable
Thrust generated by orientation systems is negligable
After the rentry burn is complete the rocket will be 
at termial velocity, which is stored as its own variable throughout different
sections of the code
'''

#Import math ibrary for mathematical functions used in air resistance calculations
import math

#Import matplotlib for plotting functions and plots
#These libraries come default on Anaconda, but other users may have to install these modules manually
import matplotlib

#Set matplotlib function header
import matplotlib.pyplot as plt

#Define starting variables of the rocket
# This code will function in one second incrememtns to record datasecond
dt = 1

#How long engines will burn after takeoff before turning off in seconds
cutoff = 120 #120 second burn time

#Acceleration due to gravity in m/s^2
g= 9.81 #Standard value for the gravitation constant at sea level, will remain constant throughout

#Angle from horionztal that rocket engines will thrust in
theta = 45 #45 degrees aboe the horizontal

#Define an empty arrays to store position, velocity, time, and drag values throughout the course of the model
y = [0]
vy=[0]
t = [0]
drag=[]

#Define initial values for time, velocity, and position
time= 0 #Measured in seconds
vyi = 0 #Measured in meters per second
yi = 0 #Measured in meters

#Define values of the rocket
F = 3000000 #Force (Newtons) generated by 1 raptor engine
dm = 300000 #Dry mass (kg) of the rocket
wm = 3000000 #Wet mass (kg) of the rocket at liftoff

#Define values related to air resistance
A = 630 # cross section area of the rocket while it is "belly-flopping"
Cd = 1.18 #Drag coefficient of a cylindrical objecct

#Calculate the acceleration of the rocket
accy= (30*F)/(wm) #Calcualted acceleration of a rocket burning 30 raptor engines

#For Loop describing engine accelerating and then cutting off at time determined by the cutoff variable
for i in range(1,600): #Max range is set to 600 simply to ensure the for loop doesn't end prematurely
    #Check if the engine has cut off, and if so, update the acceleration
    if i == cutoff:
        #sets acceleration to 0 during engine cutoff
        accy = 0
    
    #Define velocity and height using the kinematic equations
    vyf= vyi + (accy-g)*dt
    yf = yi + vyf*dt + (1/2)*(accy-g)*dt**2
    
    #Add the new velocity and position values to their respective arrays to be tracked
    y.append(yf)
    vy.append(vyf)
    
    #Add a second to the time tracker to calculate values in the next second in the next iteration of the for loop
    time = time + 1
    t.append(time)
    
    #Update the newly calcualted position and velocity values to be the new inputs in the next iteration of the for loop
    vyi = vyf
    yi = yf
    
    #When the velcotity of the rcoket goes below 0 break the loop and move on to the next part of the model
    if vyf<0:
        break


'''
SECTION 2- Reentry-

Assumptions:
Reentry is started when the rocket has reached has reached its maximum height
and its vertical velocity is zero.

Important Notes:
The reentry calculations and modelling or air resisitance
is split up into 3 different sections, each representing different parts
of the atomosphere, with varyign air densiites, resulting in different effects
on the rocket's velocity.
'''
#Grab final values from previous section of the model and redefine them as the initial values in this section
vyin = vyi
yin = yi

#vt= math.sqrt((2*dm*g)/(ro*A*Cd)) #Terminal Velocity will be this value

#Define necessary values to calculate air resistance

#Define the air pressure
p0 = 101325 #Pressure at sea level (Pa)

#Define the temperature
T0 = 220 #Temperature at sea level (K)

#Define the Temperature lapse rate
L = 0 #Temperature lapse rate (K/m)

#Define the ideal gas constant
R = 8.31446 #Ideal gas constant J/(mol*K)

#Define the molar mass of the air
M = 0.0289652 #Molar mass of dry air (kg/mol)

#For loop to calculate air resistance
for i in range(10000):
    #three conditions below for calculating the drag acceleration 
    #depends on height. The first condition is for the troposphere (<10km)
    #the second condition is for the troposphere (constant temp, 10km to 20km)
    #the third condition is above the stratosphere. We're simplifying out assumptions to say no drag above that point
    
    #Check if the rocket is near sea level and use the appropirate equations
    if yin < 10000: #if condition set to go off if the height is less than 10000
        #Redefine approximate temperature and temperature lapse rate at this altitude
        L = 0.0065
        T0 = 288.15
        
        #Calcualte ro using inputted values
        const = (p0*M)/(R*T0)
        exp = ((g*M)/(R*L))-1
        arg = 1-(L*yin/T0)
        ro = const*(arg**exp)
        
        #Calculate drag on rocket
        dragy = (0.5)*ro*(vyin**2)*Cd*A/dm
        
    #Check if the rocket is in the statosphere and use the appropriate equations
    elif 10000 <= yin <= 20000: #if condition if the height is between 10000-20000 meters
        #Calculate ro using the inputted values
        p = p0*math.exp(-g*M*yin/(R*T0))
        ro = (p*M)/(R*T0)
        
        #Calculate the drag on the rocket
        dragy = (0.5)*ro*(vyin**2)*Cd*A/dm
    
    #Check if the rocket is above the stratosphere and use the appropriate equations
    elif yin > 20000: #If condition set to go off of the altitude is above 20000 meters 
        #Set the drag on the rocket to 0 since any air resistacne it expereinces above this point can be considered negligable
        dragy = 0
        
    #Calculate new velocity, accounting for the air resistance on the rocket
    vyf = vyin + (dragy-g)*dt
    
    #Calculate new position, acounting for the 
    yf = yin + vyf*dt + (1/2)*(dragy-g)*dt**2
    
    #Add calculated position and velocity values to their respective lists
    y.append(yf)
    vy.append(vyf)
    
    #Incrase the time tracker by 1 for the next second of calculations
    time = time + 1
    
    #Add time to its respective tracking list
    t.append(time)
    
    #Add drag to its repsective tracking list
    drag.append(dragy)
    
    #Set new initial values for next iteration as the calculated final values
    vyin = vyf
    yin = yf
    
    #Stop the belly-flopping procedure and proceed to the next section if the altitue of the rocket gets too low
    if yf< 436:
        break
    
    #After every iteration, increase i by 1 in for loop
    i = i + 1 

'''
SECTION 3-LANDING PROCEDURE:
    
The rocket is very close to sea level when performing the final landing burn.
Therefore, varibles relating to the environament aroudn the rocket will stay
constant.
Due to the fact that the change in mass of the rocket will be minimal, as
little fuel will be used, the mass of the rocket throughout the model will
remain constant.
3 Engines will perform the landing burn at the same, constant thrust.
It will be timed so that the velocity of the rocket reaches 0 right
as the rocket hits the ground.
The acceleration due to graivty will not be used, considering the assumption
that the rocket will not exceed terminal velocity.
'''
#Define constants and parameters of the model
g= 9.81 #Acceleration due to gravity in m/s^2
dt = 1 # 1 second incrememnt

#Define values regarding the specification of the rocket
F = 800679 #Force (Newtons) generated by 1 raptor engine
dm = 300000 #Dry mass of the rocket

#Grab the final y position from the previous section of the model and use it as the starting height for this section
yi = yf #For initial height (m) set to yf from previous loop

#Calculate the acceleration of the rocket
accy = (3*F)/(dm)

#For loop to land and track the rocket through the final landing procedure
for i in range(1000):
    #Calculate the velocity at the given time using the kinematic equations
    vf =vyin + accy*dt
    
    #Calculate the position of the rocket at the given time using the kinematic equations
    yf = yi + vyin*dt + 0.5*accy*dt
    
    #Set calcualted values as the initial values for the next iteration of the loop
    vyin =vf
    yi = yf
    
    #Add position, velocity to their respective tracking lists
    y.append(yf)
    vy.append(vf)
    
    #Increase the time tracker by 1 for the next iteration
    time = time + 1
    
    #Add the current time to its respective tracking list
    t.append(time)
    
    #Check to see if the position ends up below the ground
    if yf<0 :
        #End the model if it meets this condition
        break
    
    #Check to see if the rockets velocity starts to increase, meaning it has fired its engines to early
    if vf>0 :
        #End the model if it meets this condition
        break

#Plot the height of the rocket with respect to time
plt.plot(t, y)
plt.show()

#Plot velocity of the rocket with respect to time
plt.plot(t, vy)
plt.show()

#Plot the velcocity of the rocket with respect to height
plt.plot (y,vy)
plt.show()
